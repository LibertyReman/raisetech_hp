@use "sass:math";

// variables
$dbg: 0;
$btnWidth: 23px;
$btnHeight: 2px;
$header-height: 70px;
$header-height-tab: 50px;
$color-white: #FFFF;
$color-black: #000000;
$color-blue1: #2498B3;
$color-blue2: #D4F1F8;
$color-blue3: #E9F8FB;
$color-hover: #F3FAFB;
$color-box:   #F7F7F7;


// mixin
@mixin dbg-border($color: blue, $px: 1, $switch: 1) {
  @if ($switch == 1 and $dbg == 1) {
    outline: #{$px}px solid $color;
    outline-offset: -#{$px}px;
  }
}

@mixin dbg-bgcolor($color: blue, $switch: 1) {
  @if ($switch == 1 and $dbg == 1) {
    background-color: $color;
  }
}

@mixin breakpoint($device) {
  @if ($device != "sp" and $device != "tab-s" and $device != "tab" and $device != "tab-l" ) {
    @warn "Invalid Argument";
  }

  @if $device == sp {
    @media (max-width:767px) { // 横幅が767px以下の時
      @content;
    }
  }
  @if $device == tab-s {
    @media (max-width:1078px) { // 横幅が1078px以下の時
      @content;
    }
  }
  @if $device == tab {
    @media (max-width:1200px) { // 横幅が1200px以下の時
      @content;
    }
  }
  @if $device == tab-l {
    @media (max-width:1280px) { // 横幅が1280px以下の時
      @content;
    }
  }
}


body {
  font-family: 'Noto Sans JP', sans-serif;
  font-weight: 700;
  line-height: 1.7;
  height: 2000px;
}

a {
  color: inherit; // 親のスタイルを継承
  text-decoration: none; // URLリンクの下線を消す
}

li {
  list-style: none; // 点(・)を削除
}


header {
  @include dbg-border(red, 10, 0);
  display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
  flex-direction: row; // 子要素の並ぶ向きを左から右に設定
  justify-content: space-between; // 子要素の横並びの置く位置を設定
  position: fixed; // ヘッダーを固定  .menu.is-open {position: absolute;} の基準位置
  z-index: 500; // 1番上に表示するために他のz-indexより大きい値に設定
  top: 0; // ヘッダー固定位置
  left: 0; // ヘッダー固定位置
  height: $header-height; // fixedは子要素の影響を受けないため設定
  width: 100%; // fixedは子要素の影響を受けないため設定
  background: $color-white;
  @include breakpoint("tab") {
    height: $header-height-tab;
  }

}

.header-left {
  margin-left: 21px;
  @include breakpoint("tab") {
    margin-left: 0;
  }

  a {
    @include dbg-border(blue, 4, 0);
    height: $header-height;
    display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
    flex-direction: row; // 子要素の並ぶ向きを左から右に設定
    align-items: center; // flex-direction: rowなので子要素のタテの間隔や置く位置を設定
    @include breakpoint("tab") {
      height: $header-height-tab;
      padding: 10px;
    }

    img {
      height: 33px; // imgタグはインライン要素だが例外でサイズ指定可能
      width: auto;
      @include breakpoint("tab") {
        height: 30px; // imgタグはインライン要素だが例外でサイズ指定可能
      }
    }

    span {
      margin-left: 16px;
      font-size: 14px;
      font-weight: 900;
      line-height: 1.3;

      strong {
        font-size: 18px;
      }
      @include breakpoint("tab-l") {
        display: none;
      }
    }

  }

}

.header-right {
  @include dbg-border(red, 4, 0);

  .hamburger-btn { // ハンバーガーメニュー
    @include dbg-bgcolor(red, 0);
    display: none;
    font-size: 0;

    @include breakpoint("tab") {
      display: block;
      width: 50px;
      height: 50px;
      position: relative;

      &::before,
      &::after { // 擬似要素：要素の直後にコンテンツを追加
        content   : ""; // before, after擬似要素で必須
        width     : $btnWidth;
        height    : $btnHeight;
        background: $color-blue1;
        position  : absolute;
        left      : calc( 50% - math.div( $btnWidth, 2 ) );
        display   : block; // 擬似要素はインライン要素のためwidth, height指定できるよう変更
        transition: transform 0.4s;
      }
      &::before {
        top: 15px;
      }
      &::after {
        top: 33px;
      }
      > span { // 真ん中の線
        width          : $btnWidth;
        height         : $btnHeight;
        font-size      : 0; // spanで指定した文字を非表示
        background     : $color-blue1;
        position       : absolute;
        left           : calc( 50% - math.div( $btnWidth, 2 ) );
        top            : calc( 50% - math.div( $btnHeight, 2 ) );
        transition     : transform 0.2s;
      }
      &.is-open { // is-openクラスがある時
        background: $color-blue1;

        &::before {
          background: $color-white;
          transform: rotate( 135deg );
          top      : 24px;
        }
        &::after {
          background: $color-white;
          transform: rotate( -135deg );
          top      : 24px;
        }
        > span {
          background: none;
        }
      }
    }

  }


  .menu {
    display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
    flex-direction: row; // 子要素の並ぶ向きを左から右に設定

    > li {
      position: relative; // sub-menuの表示位置設定用
      @include dbg-border(blue, 6, 0);

      &:hover .sub-menu {
        display: block; // sub-menuを表示
      }

      > a {
        @include dbg-border(blue, 6, 0);
        display: flex; // テキスト上下中央寄せのためにflexを使用
        align-items: center; // テキスト上下中央揃え
        height: $header-height; // 高さ必須 display: flexでインライン要素でなくなったため指定可能
        padding: 0 15px;

        &:hover {
          background: $color-blue2;
        }
      }
    }

    > li.special {
      > a {
        @include dbg-border(blue, 4, 0);
        color: $color-white;
        background: $color-blue1; // 詳細度が高いのでhoverしても$color-blue2にならない
      }
    }

    @include breakpoint("tab") { // .menu
      display: none;

      &.is-open { // is-openクラスがある時
        @include dbg-border(blue, 4, 1);
        position: absolute; // 基準位置は 親要素header position: fixed
        left: 0; // rightと組み合わせて横いっぱいに広げる設定
        right: 0; // leftと組み合わせて幅いっぱいに広げる設定
        display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
        flex-direction: column; // 子要素の並ぶ向きを上から下に設定
        background: $color-white;

        > li {
          position  : relative; // a::before, afterの基準位置に設定

          > a {
            @include dbg-border(red, 2, 0);
            height: auto;
            padding: 10px;

            &:not(.no-sub-menu)::before,
            &:not(.no-sub-menu)::after { // ＋のヨコ線
              content   : ""; // before, after擬似要素で必須
              display   : block; // 擬似要素はインライン要素のためwidth, height指定できるよう変更
              width     : $btnWidth;
              height    : $btnHeight;
              background: $color-black;
              position  : absolute;
              right     : 13px;
            }
            &:not(.no-sub-menu)::after { // ＋のタテ線
              transform: rotate(90deg);
            }
          }

          &:hover {
            @include dbg-border(blue, 2, 0);

            > a {
              position: relative; // a::before, afterの基準位置設定はaタグ自身にする

              &:hover {
                background: $color-hover;
              }

              &:not(.no-sub-menu)::before { // ＋のヨコ線
                z-index: 100; // タテの線より上に表示する
              }
              &:not(.no-sub-menu)::after { // liタグホバー時は＋のタテ線は無くしてボックスを表示
                transform: rotate(0deg); // width heightの方向を治すために回転を戻す
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                width: 50px;
                height: auto;
                background: $color-box;
              }
            }
          }
        }

        > li.special {
          > a {
            display: none;
          }
        }

      }
    }
  }

  .sub-menu {
    display: none; // sub-menuを非表示
    position: absolute; // 親要素(.menu > li) に指定したrelativeを基準に表示位置を設定
    top: $header-height; // absoluteの表示位置調整
    left: 0; // absoluteの表示位置調整

    > li {
      background: $color-blue3;
      @include dbg-border(red, 3, 0);

      > a {
        @include dbg-border(black, 1, 0);
        display: flex; // テキスト上下中央寄せのためにflexを使用
        align-items: center; // テキスト上下中央揃え
        padding: 15px 60px 15px 15px;
        white-space: pre; // 自動改行を無効
        font-weight: 400;

        &:hover {
          color: $color-blue1;
          background: $color-white;
        }
      }
    }

    @include breakpoint("tab") { // .sub-menu
      display: none; // sub-menuを非表示
      position: static; // HTMLのデフォルト配置モードに設定 menu.liの高さを動的にする

      > li {
        background: $color-white;
        @include dbg-border(red, 3, 1);

        > a {
          @include dbg-bgcolor(yellow, 1);
          padding: 10px 10px 10px 25px;

          &:hover {
            color: $color-black;
            background: $color-hover;
          }
        }
      }

    }

  }

}


article {
  @include dbg-border(blue, 7, 0);
  display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
  flex-direction: column; // 子要素の並ぶ向きを上から下に設定
  align-items: center; // 子要素の横並びの置く位置を設定
  margin-top: $header-height; // 外側の余白
  padding-top: 80px; // 内側の余白
  background-image: url(../img/bg-hero1.png),url(../img/bg-hero2.png),url(../img/bg-hero3.png);
  background-position: center -75px, center -75px, center center;
  background-size: auto, auto, cover;
  background-attachment: scroll, scroll, fixed;

  @include breakpoint("tab") {
    margin-top: $header-height-tab;
  }

  @include breakpoint("sp") {
    background-position: center -30px, center -25px, center -25px;
    padding-top: 163px;
    background-size: 800px, 800px, cover;
  }
}


.main-area1 {
  @include dbg-border(red, 8, 0);
  height: 570px;

  @include breakpoint("sp") {
    width: 100%;
    height: auto;
  }
}


.main-card {
  @include dbg-border(red, 5, 0);
  display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
  flex-direction: column; // 子要素の並ぶ向きを上から下に設定
  align-items: center; // 子要素の横並びの置く位置を設定
  padding: 43px 40px 19px 40px;
  border-radius: 10px;
  background: $color-white;

  @include breakpoint("sp") {
    padding: 9px 0 13px;
    border-radius: 0;
  }

  img {
    width: 280px;
    height: auto;

    @include breakpoint("sp") {
      display: none;
    }
  }

  p {
    margin: 1.3em 0 0.5em;
    text-align: center;

    @include breakpoint("sp") {
      margin: 0.5em 0;
      font-size: 13px;
    }
  }

  .main-btn {
    padding: 24px 37px;
    margin: 1.1em 0 0.5em;
    background: $color-blue1;
    color: $color-white;
    border-radius: 4px;
    border: solid 1px #C3C3C3;
    font-size: 18px;
    line-height: 1.0;
    transition: .3s; // レスポンシブでアニメーション

    @include breakpoint("sp") {
      margin: 6.5px 0;
      padding: 12px 18px;
      font-size: 16px;
    }
  }

}

.main-area2 {
  @include dbg-border(yellow, 5, 0);
  position: relative;  // sub-cardの表示位置設定用
  background: $color-black;
  padding: 4em 0;
  width: 100%;
  height: 230px;
  color: $color-white;
  @include breakpoint("sp") {
    height: auto;
  }
}


.sub-card {
  @include dbg-border(blue, 7, 0);
  position: absolute;  // 親要素に指定したrelativeを基準に表示位置を設定
  width: 100%; // absoluteは子要素の影響を受けなくなるため設定
  top: -199px; // absoluteは子要素の影響を受けなくなるため設定
  display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
  flex-direction: row; // 子要素の並ぶ向きを左から右に設定
  justify-content: center; // 子要素の横並びの置く位置を設定

  @include breakpoint("tab-s") {
    max-width:1078px;
  }
  @include breakpoint("sp") {
    position: static;
    flex-direction: column;
    align-items: center;
  }

  .card {
    @include dbg-border(red, 4, 0);
    display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
    flex-direction: column; // 子要素の並ぶ向きを上から下に設定
    align-items: center; // 子要素の横並びの置く位置を設定
    width: 229px;
    margin: 0 50px;

    @include breakpoint("tab-s") {
      width: 29.33%;
      margin: 0 1.7%;
    }
    @include breakpoint("sp") {
      width: auto;
      margin: 0 2%;
      margin-bottom: 2.5em;
    }

    .circle {
      height: 230px;
      width: 230px;
      background: $color-white;
      border-radius: 50%;
      border: solid 6px $color-black;

      display: flex; // flexの使用を設定 直下の子要素は全てブロック要素に変更される
      flex-direction: row; // 子要素の並ぶ向きを左から右に設定
      justify-content: center; // 子要素の横並びの置く位置を設定
      align-items: center; // 子要素の縦並びの置く位置を設定

      i {
        font-size: 100px;
        color: $color-black;
      }
    }

    .card-title {
      @include dbg-border(yellow, 4, 0);
      margin-top: 4.8px;
      font-size: 24px;
    }

    .card-sentence {
      margin-top: 8px;
    }
  }

}



